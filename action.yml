name: Add fcitx5 support to PySide

description: Add fcitx5 support to the PySide library or programs based on it
author: "chenmozhijin"
branding:
  icon: package
  color: green

inputs:
  plugins-path:
    description: The path to the Qt plugins directory
    required: true

  PySide-version:
    description: The version of the PySide library (e.g. 6.7.3)

runs:
  using: "composite"
  steps:
    - name: Get PySide version
      id: get-pyside-version
      shell: bash
      run: |
        if [ -z "${{ inputs.PySide-version }}" ]; then
          echo "PySide_Version=$(pip show PySide6-Essentials | grep Version | awk '{print $2}' | cut -d. -f1-3)" >> $GITHUB_OUTPUT
        else
          echo "PySide_Version=${{ inputs.PySide-version }}" >> $GITHUB_OUTPUT
        fi

    - name: Install dependencies
      id: install-dependencies
      shell: bash
      run: | 
        sudo apt-get update
        sudo apt-get install -y build-essential clang cmake ninja-build extra-cmake-modules libfmt-dev libuv1-dev git libxkbcommon-dev libicu-dev gettext libgl1-mesa-dev libwayland-dev libvulkan-dev uuid-dev itstool gettext appstream software-properties-common

        python3 -m venv ${{ github.action_path }}/python-venv
        source ${{ github.action_path }}/python-venv/bin/activate
        pip install -U pip
        pip install -U aqtinstall

        arch=$(uname -m)
        if [[ "$arch" == "x86_64" ]]; then
          python3 -m aqt install-qt linux desktop ${{ steps.get-pyside-version.outputs.PySide_Version }} --outputdir ${{ github.action_path }}/Qt --archives qtbase qtwayland icu
          echo "arch=gcc_64" >> $GITHUB_OUTPUT
        elif [[ "$arch" == "aarch64" ]]; then
          python3 -m aqt install-qt linux_arm64 desktop ${{ steps.get-pyside-version.outputs.PySide_Version }} --outputdir ${{ github.action_path }}/Qt --archives qtbase qtwayland icu
          echo "arch=gcc_arm64" >> $GITHUB_OUTPUT
        fi

        GCC_MAJOR_VERSION=$(gcc --version | grep -oP '(?<= )[0-9]+(?=\.)' | head -1)
        echo "Current GCC major version: $GCC_MAJOR_VERSION"
    
        # 根据版本决定安装
        if [ "$GCC_MAJOR_VERSION" -lt 13 ]; then
            echo "Installing GCC 13..."
            # 添加Ubuntu Toolchain PPA获取新编译器
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
            sudo apt-get update
            sudo apt-get install -y gcc-13 g++-13
            CXX_COMPILER=/usr/bin/g++-13
        else
            echo "Using existing GCC $GCC_MAJOR_VERSION"
            CXX_COMPILER=/usr/bin/g++
        fi
    
        # 将编译器路径存入环境变量
        echo "CXX_COMPILER=$CXX_COMPILER" >> $GITHUB_ENV

        # 验证编译器版本
        echo "Selected compiler info:"
        $CXX_COMPILER --version

    - name: clone fcitx5 and fcitx5-qt
      shell: bash
      run: |
        git clone https://github.com/fcitx/fcitx5.git --depth 1 ${{ github.action_path }}/fcitx5
        git clone https://github.com/fcitx/fcitx5-qt.git --depth 1 ${{ github.action_path }}/fcitx5-qt

    - name: Build and Install fcitx5
      shell: bash
      run: |
        export CXX=${{ env.CXX_COMPILER }}
        cmake -G Ninja \
              -S "${{ github.action_path }}/fcitx5" \
              -B "${{ github.action_path }}/fcitx5"/build \
              -DENABLE_KEYBOARD=Off -DENABLE_X11=Off -DENABLE_WAYLAND=Off -DENABLE_ENCHANT=Off \
              -DENABLE_DBUS=Off -DENABLE_SERVER=Off -DENABLE_EMOJI=Off -DUSE_SYSTEMD=Off \
              -DCMAKE_INSTALL_PREFIX="${{ github.action_path }}/install"
        sudo cmake --build "${{ github.action_path }}/fcitx5"/build -j
        sudo cmake --install "${{ github.action_path }}/fcitx5"/build

    - name: Build and Install fcitx5-qt
      shell: bash
      run: |
        export CXX=${{ env.CXX_COMPILER }}
        cmake -G Ninja \
              -S "${{ github.action_path }}/fcitx5-qt" \
              -B "${{ github.action_path }}/fcitx5-qt"/build \
              -DENABLE_QT4=Off -DENABLE_QT5=off -DENABLE_QT6=On -DBUILD_ONLY_PLUGIN=On \
              -DCMAKE_PREFIX_PATH=${{ github.action_path }}/Qt/${{ steps.get-pyside-version.outputs.PySide_Version }}/${{ steps.install-dependencies.outputs.arch }}/lib/cmake \
              -DCMAKE_INSTALL_PREFIX="${{ github.action_path }}/install"
        sudo cmake --build "${{ github.action_path }}/fcitx5-qt"/build -j
        sudo cmake --install "${{ github.action_path }}/fcitx5-qt"/build

    - name: Copy
      shell: bash
      run: |
        mkdir -p ${{ inputs.plugins-path }}/platforminputcontexts
        cp -vfp ${{ github.action_path }}/Qt/${{ steps.get-pyside-version.outputs.PySide_Version }}/${{ steps.install-dependencies.outputs.arch }}/plugins/platforminputcontexts/libfcitx5platforminputcontextplugin.so ${{ inputs.plugins-path }}/platforminputcontexts/