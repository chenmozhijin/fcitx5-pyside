name: Add fcitx5 support to PySide

description: Add fcitx5 support to the PySide library or programs based on it
author: "chenmozhijin"
branding:
  icon: package
  color: green

inputs:
  plugins-path:
    description: The path to the Qt plugins directory
    required: true

  PySide-version:
    description: The version of the PySide library (e.g. 6.7.3)

runs:
  using: "composite"
  steps:
    - name: Get PySide version
      id: get-pyside-version
      shell: bash
      run: |
        if [ -z "${{ inputs.PySide-version }}" ]; then
          echo "PySide_Version=$(pip show PySide6-Essentials | grep Version | awk '{print $2}' | cut -d. -f1-3)" >> $GITHUB_OUTPUT
        else
          echo "PySide_Version=${{ inputs.PySide-version }}" >> $GITHUB_OUTPUT
        fi


    - name: Install common dependencies and detect OS
      id: install-dependencies
      shell: bash
      run: |
        sudo apt-get update
        # 安装所有分支都需要的通用依赖，以及 Debian 编译 GCC 所需的依赖
        sudo apt-get install -y \
          build-essential clang cmake ninja-build extra-cmake-modules \
          libfmt-dev libuv1-dev git libxkbcommon-dev libicu-dev gettext \
          libgl1-mesa-dev libwayland-dev libvulkan-dev uuid-dev itstool \
          gettext appstream software-properties-common curl gpg \
          libgmp-dev libmpfr-dev libmpc-dev wget bzip2 xz-utils file \
          python3-venv python3-pip

        # 检测 OS 并将信息输出到 GITHUB_ENV 供后续步骤使用
        # shellcheck source=/dev/null
        . /etc/os-release
        echo "OS_ID=$ID" >> $GITHUB_ENV
        echo "OS_VERSION_CODENAME=$VERSION_CODENAME" >> $GITHUB_ENV
        echo "Detected OS: $ID ($VERSION_CODENAME)"

        arch=$(uname -m)
        if [[ "$arch" == "x86_64" ]]; then
          python3 -m aqt install-qt linux desktop ${{ steps.get-pyside-version.outputs.PySide_Version }} --outputdir ${{ github.action_path }}/Qt --archives qtbase qtwayland icu
          echo "arch=gcc_64" >> $GITHUB_OUTPUT
        elif [[ "$arch" == "aarch64" ]]; then
          python3 -m aqt install-qt linux_arm64 desktop ${{ steps.get-pyside-version.outputs.PySide_Version }} --outputdir ${{ github.action_path }}/Qt --archives qtbase qtwayland icu
          echo "arch=gcc_arm64" >> $GITHUB_OUTPUT
        fi


    - name: Install GCC 13 for Ubuntu
      if: env.OS_ID == 'ubuntu'
      shell: bash
      run: |
        GCC_MAJOR_VERSION=$(gcc --version | head -n1 | sed -E 's/.* ([0-9]+)\..*/\1/')
        if [ "$GCC_MAJOR_VERSION" -lt 13 ]; then
            echo "-> Running on Ubuntu. Installing GCC 13 via PPA..."
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
            sudo apt-get update
            sudo apt-get install -y gcc-13 g++-13
        else
            echo "-> GCC version $GCC_MAJOR_VERSION is sufficient."
        fi

    - name: Cache or Compile GCC 13 for Debian
      if: env.OS_ID == 'debian'
      id: compile-gcc-debian
      uses: actions/cache@v4
      with:
        path: /opt/gcc-13.2.0
        key: gcc-13.2.0-debian-${{ env.OS_VERSION_CODENAME }}

    - name: Compile GCC 13 on Debian if not cached
      if: steps.compile-gcc-debian.outputs.cache-hit != 'true' && env.OS_ID == 'debian'
      shell: bash
      run: |
        echo "-> Running on Debian. GCC 13 not found in cache. Compiling from source..."
        GCC_VERSION="13.2.0"
        INSTALL_DIR="/opt/gcc-${GCC_VERSION}"
        cd /tmp
        wget https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VERSION}/gcc-${GCC_VERSION}.tar.gz
        tar -xf gcc-${GCC_VERSION}.tar.gz
        cd gcc-${GCC_VERSION}
        ./contrib/download_prerequisites
        mkdir build && cd build
        ../configure --prefix="$INSTALL_DIR" --enable-languages=c,c++ --disable-multilib --disable-bootstrap
        make -j$(nproc)
        sudo make install

    - name: Set Compiler Environment
      id: set-compiler
      shell: bash
      run: |
        if [ "${{ env.OS_ID }}" == "debian" ]; then
            GCC_PATH="/opt/gcc-13.2.0/bin"
            echo "Setting up custom compiled GCC from $GCC_PATH"
            echo "$GCC_PATH" | sudo tee -a $GITHUB_PATH
            echo "CXX_COMPILER=$GCC_PATH/g++" >> $GITHUB_ENV
        else # Ubuntu
            GCC_MAJOR_VERSION=$(gcc --version | head -n1 | sed -E 's/.* ([0-9]+)\..*/\1/')
            if [ "$GCC_MAJOR_VERSION" -lt 13 ]; then
                echo "Setting up GCC 13 from PPA"
                echo "CXX_COMPILER=/usr/bin/g++-13" >> $GITHUB_ENV
            else
                echo "Setting up system GCC $GCC_MAJOR_VERSION"
                echo "CXX_COMPILER=/usr/bin/g++" >> $GITHUB_ENV
            fi
        fi
        
    - name: Verify selected compiler
      shell: bash
      run: |
        echo "Selected CXX compiler is ${{ env.CXX_COMPILER }}"
        ${{ env.CXX_COMPILER }} --version

    - name: Install Qt via aqtinstall
      id: install-qt
      shell: bash
      run: |
        python3 -m venv ${{ github.action_path }}/python-venv
        source ${{ github.action_path }}/python-venv/bin/activate
        pip install -U pip
        pip install -U aqtinstall

    - name: Clone fcitx5 and fcitx5-qt
      shell: bash
      run: |
        git clone https://github.com/fcitx/fcitx5.git --depth 1 ${{ github.action_path }}/fcitx5
        git clone https://github.com/fcitx/fcitx5-qt.git --depth 1 ${{ github.action_path }}/fcitx5-qt

    - name: Build and Install fcitx5
      shell: bash
      run: |
        export CXX=${{ env.CXX_COMPILER }}
        cmake -G Ninja \
              -S "${{ github.action_path }}/fcitx5" \
              -B "${{ github.action_path }}/fcitx5"/build \
              -DENABLE_KEYBOARD=Off -DENABLE_X11=Off -DENABLE_WAYLAND=Off -DENABLE_ENCHANT=Off \
              -DENABLE_DBUS=Off -DENABLE_SERVER=Off -DENABLE_EMOJI=Off -DUSE_SYSTEMD=Off \
              -DCMAKE_INSTALL_PREFIX="${{ github.action_path }}/install"
        sudo cmake --build "${{ github.action_path }}/fcitx5"/build -j
        sudo cmake --install "${{ github.action_path }}/fcitx5"/build

    - name: Build and Install fcitx5-qt
      shell: bash
      run: |
        export CXX=${{ env.CXX_COMPILER }}
        cmake -G Ninja \
              -S "${{ github.action_path }}/fcitx5-qt" \
              -B "${{ github.action_path }}/fcitx5-qt"/build \
              -DENABLE_QT4=Off -DENABLE_QT5=off -DENABLE_QT6=On -DBUILD_ONLY_PLUGIN=On \
              -DCMAKE_PREFIX_PATH=${{ github.action_path }}/Qt/${{ steps.get-pyside-version.outputs.PySide_Version }}/${{ steps.install-dependencies.outputs.arch }}/lib/cmake \
              -DCMAKE_INSTALL_PREFIX="${{ github.action_path }}/install"
        sudo cmake --build "${{ github.action_path }}/fcitx5-qt"/build -j
        sudo cmake --install "${{ github.action_path }}/fcitx5-qt"/build

    - name: Copy
      shell: bash
      run: |
        mkdir -p ${{ inputs.plugins-path }}/platforminputcontexts
        cp -vfp ${{ github.action_path }}/Qt/${{ steps.get-pyside-version.outputs.PySide_Version }}/${{ steps.install-dependencies.outputs.arch }}/plugins/platforminputcontexts/libfcitx5platforminputcontextplugin.so ${{ inputs.plugins-path }}/platforminputcontexts/