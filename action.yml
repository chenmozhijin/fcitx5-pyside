name: Add fcitx5 support to PySide
description: Add fcitx5 support to the PySide library or programs based on it.
author: "chenmozhijin"
branding:
  icon: package
  color: green

inputs:
  plugins-path:
    description: The path to the Qt plugins directory
    required: true
  PySide-version:
    description: The version of the PySide library (e.g. 6.7.3)

runs:
  using: "composite"
  steps:
    # 步骤 1: 获取 PySide 版本 (保持不变)
    - name: Get PySide version
      id: get-pyside-version
      shell: bash
      run: |
        if [ -z "${{ inputs.PySide-version }}" ]; then
          echo "PySide_Version=$(python3 -m pip show PySide6-Essentials | grep Version | awk '{print $2}' | cut -d. -f1-3)" >> $GITHUB_OUTPUT
        else
          echo "PySide_Version=${{ inputs.PySide-version }}" >> $GITHUB_OUTPUT
        fi

    # 步骤 2: 安装通用依赖并检测操作系统
    - name: Install dependencies and detect OS
      id: prepare-env
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential clang cmake ninja-build extra-cmake-modules libfmt-dev \
          libuv1-dev git libxkbcommon-dev libicu-dev gettext libgl1-mesa-dev \
          libwayland-dev libvulkan-dev uuid-dev itstool gettext appstream \
          software-properties-common curl gpg libgmp-dev libmpfr-dev libmpc-dev \
          wget bzip2 xz-utils file python3-venv python3-pip

        # 检测 OS 并输出
        # shellcheck source=/dev/null
        . /etc/os-release
        echo "os_id=$ID" >> $GITHUB_OUTPUT
        echo "Detected OS: $ID"

    # 步骤 3: 为 Debian 11 缓存或从源码编译 GCC 13
    - name: Cache or Compile GCC 13 for Debian
      if: steps.prepare-env.outputs.os_id == 'debian'
      id: cache-gcc-debian
      uses: actions/cache@v4
      with:
        path: /opt/gcc-13.2.0
        key: gcc-13.2.0-debian-bullseye

    - name: Compile GCC 13 on Debian if not cached
      if: steps.cache-gcc-debian.outputs.cache-hit != 'true' && steps.prepare-env.outputs.os_id == 'debian'
      shell: bash
      run: |
        echo "-> Running on Debian. Compiling GCC 13 from source..."
        GCC_VERSION="13.2.0"
        INSTALL_DIR="/opt/gcc-${GCC_VERSION}"
        cd /tmp
        wget -q https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VERSION}/gcc-${GCC_VERSION}.tar.gz
        tar -xf gcc-${GCC_VERSION}.tar.gz
        cd gcc-${GCC_VERSION}
        ./contrib/download_prerequisites
        mkdir build && cd build
        ../configure --prefix="$INSTALL_DIR" --enable-languages=c,c++ --disable-multilib --disable-bootstrap
        make -j$(nproc)
        sudo make install

    # 步骤 4: 确定并输出编译器路径
    - name: Determine Compiler Path
      id: get-compiler
      shell: bash
      run: |
        CXX_PATH=""
        if [ "${{ steps.prepare-env.outputs.os_id }}" == 'debian' ]; then
            echo "-> Using custom compiled GCC for Debian."
            CXX_PATH="/opt/gcc-13.2.0/bin/g++"
            echo "/opt/gcc-13.2.0/bin" | sudo tee -a $GITHUB_PATH > /dev/null
        else # Ubuntu
            GCC_MAJOR_VERSION=$(gcc --version | head -n1 | sed -E 's/.* ([0-9]+)\..*/\1/')
            if [ "$GCC_MAJOR_VERSION" -lt 13 ]; then
                echo "-> Installing GCC 13 for Ubuntu via PPA..."
                sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
                sudo apt-get update
                sudo apt-get install -y gcc-13 g++-13
                CXX_PATH="/usr/bin/g++-13"
            else
                echo "-> Using existing system GCC $GCC_MAJOR_VERSION on Ubuntu."
                CXX_PATH="/usr/bin/g++"
            fi
        fi
        echo "cxx_compiler=$CXX_PATH" >> $GITHUB_OUTPUT

    # 步骤 5: 安装 Qt
    - name: Install Qt via aqtinstall
      id: install-qt
      shell: bash
      run: |
        python3 -m venv ${{ github.action_path }}/python-venv
        source ${{ github.action_path }}/python-venv/bin/activate
        pip install -U pip aqtinstall
        arch=$(uname -m)
        if [[ "$arch" == "x86_64" ]]; then
          python3 -m aqt install-qt linux desktop ${{ steps.get-pyside-version.outputs.PySide_Version }} --outputdir ${{ github.action_path }}/Qt --archives qtbase qtwayland icu
          echo "arch=gcc_64" >> $GITHUB_OUTPUT
        elif [[ "$arch" == "aarch64" ]]; then
          python3 -m aqt install-qt linux_arm64 desktop ${{ steps.get-pyside-version.outputs.PySide_Version }} --outputdir ${{ github.action_path }}/Qt --archives qtbase qtwayland icu
          echo "arch=gcc_arm64" >> $GITHUB_OUTPUT
        fi

    # 步骤 6: 克隆 fcitx5 仓库
    - name: Clone fcitx5 and fcitx5-qt
      shell: bash
      run: |
        git clone https://github.com/fcitx/fcitx5.git --depth 1 ${{ github.action_path }}/fcitx5
        git clone https://github.com/fcitx/fcitx5-qt.git --depth 1 ${{ github.action_path }}/fcitx5-qt

    # 步骤 7: 构建并安装 fcitx5
    - name: Build and Install fcitx5
      shell: bash
      run: |
        export CXX=${{ steps.get-compiler.outputs.cxx_compiler }}
        cmake -G Ninja \
              -S "${{ github.action_path }}/fcitx5" \
              -B "${{ github.action_path }}/fcitx5"/build \
              -DENABLE_KEYBOARD=Off -DENABLE_X11=Off -DENABLE_WAYLAND=Off -DENABLE_ENCHANT=Off \
              -DENABLE_DBUS=Off -DENABLE_SERVER=Off -DENABLE_EMOJI=Off -DUSE_SYSTEMD=Off \
              -DCMAKE_INSTALL_PREFIX="${{ github.action_path }}/install"
        sudo cmake --build "${{ github.action_path }}/fcitx5"/build -j
        sudo cmake --install "${{ github.action_path }}/fcitx5"/build

    # 步骤 8: 构建并安装 fcitx5-qt
    - name: Build and Install fcitx5-qt
      shell: bash
      run: |
        export CXX=${{ steps.get-compiler.outputs.cxx_compiler }}
        cmake -G Ninja \
              -S "${{ github.action_path }}/fcitx5-qt" \
              -B "${{ github.action_path }}/fcitx5-qt"/build \
              -DENABLE_QT4=Off -DENABLE_QT5=off -DENABLE_QT6=On -DBUILD_ONLY_PLUGIN=On \
              -DCMAKE_PREFIX_PATH=${{ github.action_path }}/Qt/${{ steps.get-pyside-version.outputs.PySide_Version }}/${{ steps.install-qt.outputs.arch }}/lib/cmake \
              -DCMAKE_INSTALL_PREFIX="${{ github.action_path }}/install"
        sudo cmake --build "${{ github.action_path }}/fcitx5-qt"/build -j
        sudo cmake --install "${{ github.action_path }}/fcitx5-qt"/build

    # 步骤 9: 复制插件
    - name: Copy Plugin
      shell: bash
      run: |
        sudo mkdir -p ${{ inputs.plugins-path }}/platforminputcontexts
        sudo cp -vfp ${{ github.action_path }}/Qt/${{ steps.get-pyside-version.outputs.PySide_Version }}/${{ steps.install-qt.outputs.arch }}/plugins/platforminputcontexts/libfcitx5platforminputcontextplugin.so ${{ inputs.plugins-path }}/platforminputcontexts/