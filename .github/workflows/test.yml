name: test

on:
  push:
    branches:
      - main

jobs:
  build:
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04, ubuntu-24.04-arm]



    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PySide6

      - name: Run test
        uses: ./
        with:
          plugins-path: ./plugins

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.os }}
          path: ./plugins

  build-debian-11:
    container: 
      image: debian:11
      volumes:
        - /home/runner/work:/home/runner/work
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
          include:
            - os: ubuntu-latest
              arch: x64
            - os: ubuntu-ubuntu-24.04-arm
              arch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Linux dependencies
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          echo "deb http://debian-archive.trafficmanager.net/debian bullseye main contrib non-free" > /etc/apt/sources.list
          echo "deb-src http://debian-archive.trafficmanager.net/debian bullseye main contrib non-free" >> /etc/apt/sources.list

          echo "deb http://debian-archive.trafficmanager.net/debian-security bullseye-security main contrib non-free" >> /etc/apt/sources.list
          echo "deb-src http://debian-archive.trafficmanager.net/debian-security bullseye-security main contrib non-free" >> /etc/apt/sources.list

          echo "deb http://debian-archive.trafficmanager.net/debian bullseye-updates main contrib non-free" >> /etc/apt/sources.list
          echo "deb-src http://debian-archive.trafficmanager.net/debian bullseye-updates main contrib non-free" >> /etc/apt/sources.list

          apt-get update
          apt-get install -y libegl1 upx sudo unzip wget apt-transport-https gnupg git jq curl libglib2.0-dev build-essential ccache patchelf

          echo "--- Installing PowerShell for ${{ matrix.arch }} ---"

          if [[ "${{ matrix.arch }}" == "x64" ]]; then
            # x64/amd64 架构可以使用 apt 安装，它通常会跟踪一个较新的版本
            echo "Installing PowerShell for x64 via apt..."
            wget https://packages.microsoft.com/config/debian/11/packages-microsoft-prod.deb
            dpkg -i packages-microsoft-prod.deb
            rm packages-microsoft-prod.deb
            apt-get update
            apt-get install -y powershell

          elif [[ "${{ matrix.arch }}" == "arm64" ]]; then
            # arm64 架构需要从 GitHub Releases 手动安装最新版本
            echo "Installing latest PowerShell for arm64 manually from GitHub API..."
            
            # 1. 使用 GitHub API 找到最新 arm64 版本的下载链接
            echo "Querying GitHub API for the latest release..."
            LATEST_URL=$(curl -s https://api.github.com/repos/PowerShell/PowerShell/releases/latest | jq -r '.assets[] | select(.name | test("linux-arm64.tar.gz")) | .browser_download_url')

            if [ -z "$LATEST_URL" ]; then
              echo "::error::Could not find the latest PowerShell arm64 download URL from the GitHub API."
              exit 1
            fi
            
            echo "Found download URL: $LATEST_URL"

            # 2. 下载压缩包
            wget -q --show-progress "$LATEST_URL" -O powershell.tar.gz
            
            # 3. 创建安装目录并解压
            mkdir -p /opt/microsoft/powershell/7
            tar zxf powershell.tar.gz -C /opt/microsoft/powershell/7
            
            # 4. 创建符号链接，使 'pwsh' 命令在 PATH 中可用
            ln -s /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh
            chmod +x /usr/bin/pwsh
            chmod +x /opt/microsoft/powershell/7/pwsh
            
            # 5. 清理
            rm powershell.tar.gz
            echo "PowerShell for arm64 installed successfully."
          else
            echo "::error::Unsupported architecture for PowerShell installation: ${{ matrix.arch }}"
            exit 1
          fi

          echo "--- Verifying PowerShell installation ---"
          pwsh --version


      - uses: MatteoH2O1999/setup-python@v5
        if: ${{ runner.os == 'Linux' }}
        with:
          python-version: 3.12
          architecture: ${{ matrix.arch }}
          allow-build: force
          cache-build: true

      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PySide6

      - name: Run test
        uses: ./
        with:
          plugins-path: ./plugins

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.arch }}-${{ github.sha }}
          path: ./plugins